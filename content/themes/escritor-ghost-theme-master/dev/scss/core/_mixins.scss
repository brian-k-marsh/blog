// ==================================================
// Mixins
// ==================================================

$breakpoints: (
  small: 480px,
  medium: 800px,
  large: 1024px
);



// Media Queries
// ==================================================


@mixin respond-to($breakpoint) { 
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// Typography
// ==================================================
$p-font-sizes: (
  null  : (1.7rem, 1.3),
  small : 1.7rem,
  medium: (1.7rem, 1.4),
  large : (2rem, 1.5)
);


$h2-font-sizes: (
  null  : 4rem,
  small : 4rem,
  medium: 5rem,
  large : 6rem
);

$h3-font-sizes: (
  null  : 2.8rem,
  small : 2.8rem,
  medium: 3.2rem,
  large : 3.6rem
);

$h4-font-sizes: (
  null  : 2.2rem,
  small : 2.2rem,
  medium: 2.6rem,
  large : 3rem
);




@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}


// z-index
// ==================================================

@function z-index($key) {
  @return map-get($z-index, $key);
}

@mixin z-index($key) {
  z-index: z-index($key);
}
